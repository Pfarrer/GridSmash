class_name EnergyGrid
extends RefCounted

var energy_flow = EnergyFlow.new(self)

var _connections: Array = []
var _structures_set = CountingSet.new()

func is_structure_connected_to_grid(structure: Structure) -> bool:
	for connection in _connections:
		if connection.connects_to(structure):
			return true
	return false


func add_grid_connection(connection: GridConnection) -> void:
	if !_connections.has(connection):
		_connections.push_back(connection)

		_structures_set.add(connection.structure1)
		_structures_set.add(connection.structure2)

		energy_flow.on_structures_changed()


### Ensures that the grid is still connected after removing a connection. If it is not, the grid is split into two grids.
### The new grid is returned if the grid was split, otherwise null is returned.
func remove_grid_connection(connection: GridConnection) -> EnergyGrid:
	var new_grid: EnergyGrid = null
	var idx = _connections.find(connection)
	if idx != -1:
		_connections.remove_at(idx)

		_structures_set.sub(connection.structure1)
		_structures_set.sub(connection.structure2)

		# Check if the grid is still fully connected
		new_grid = _split_grid_if_needed(connection.structure2)

		energy_flow.on_structures_changed()

	return new_grid


func merge_with_grid(other: EnergyGrid) -> void:
	for connection in other._connections:
		add_grid_connection(connection)


func is_empty() -> bool:
	return _connections.size() == 0


func structures() -> Array:
	return _structures_set.items()


### Generated by Copilot
func _reachable_structures_from(structure: Structure, visited: Array = []) -> Array:
	for connection in _connections:
		if connection.connects_to(structure):
			var other_structure = connection.get_other_structure(structure)
			if !visited.has(other_structure):
				visited.push_back(other_structure)
				_reachable_structures_from(other_structure, visited)
	return visited


func _split_grid_if_needed(structure: Structure) -> EnergyGrid:
	var reachable_structures_from_structure2 = _reachable_structures_from(structure)
	if reachable_structures_from_structure2.size() != _structures_set.size():
#		var reachable_structures_from_structure1 = _reachable_structures_from(connection.structure1)
#		assert(reachable_structures_from_structure1.size() + reachable_structures_from_structure2.size() == _structures_set.size())

		var new_grid = EnergyGrid.new()
		for connection in _connections:
			if reachable_structures_from_structure2.has(connection.structure1) && reachable_structures_from_structure2.has(connection.structure2):
				new_grid.add_grid_connection(connection)
				_connections.remove_at(_connections.find(connection))
				_structures_set.remove(connection.structure1)
				_structures_set.remove(connection.structure2)
		return new_grid
	
	return null
